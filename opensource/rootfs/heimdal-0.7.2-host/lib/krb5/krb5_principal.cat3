
KRB5_PRINCIPAL(3)          UNIX Programmer's Manual          KRB5_PRINCIPAL(3)

NNAAMMEE
     kkrrbb55__ggeett__ddeeffaauulltt__pprriinncciippaall, kkrrbb55__pprriinncciippaall, kkrrbb55__bbuuiilldd__pprriinncciippaall,
     kkrrbb55__bbuuiilldd__pprriinncciippaall__eexxtt, kkrrbb55__bbuuiilldd__pprriinncciippaall__vvaa,
     kkrrbb55__bbuuiilldd__pprriinncciippaall__vvaa__eexxtt, kkrrbb55__ccooppyy__pprriinncciippaall, kkrrbb55__ffrreeee__pprriinncciippaall,
     kkrrbb55__mmaakkee__pprriinncciippaall, kkrrbb55__ppaarrssee__nnaammee, kkrrbb55__pprriinncc__rreeaallmm,
     kkrrbb55__pprriinncc__sseett__rreeaallmm, kkrrbb55__pprriinncciippaall__ccoommppaarree,
     kkrrbb55__pprriinncciippaall__ccoommppaarree__aannyy__rreeaallmm, kkrrbb55__pprriinncciippaall__ggeett__ccoommpp__ssttrriinngg,
     kkrrbb55__pprriinncciippaall__ggeett__rreeaallmm, kkrrbb55__pprriinncciippaall__ggeett__ttyyppee, kkrrbb55__pprriinncciippaall__mmaattcchh,
     kkrrbb55__pprriinncciippaall__sseett__ttyyppee, kkrrbb55__rreeaallmm__ccoommppaarree, kkrrbb55__ssnnaammee__ttoo__pprriinncciippaall,
     kkrrbb55__ssoocckk__ttoo__pprriinncciippaall, kkrrbb55__uunnppaarrssee__nnaammee, kkrrbb55__uunnppaarrssee__nnaammee__ffiixxeedd,
     kkrrbb55__uunnppaarrssee__nnaammee__ffiixxeedd__sshhoorrtt, kkrrbb55__uunnppaarrssee__nnaammee__sshhoorrtt - Kerberos 5 prin-
     cipal handling functions

LLIIBBRRAARRYY
     Kerberos 5 Library (libkrb5, -lkrb5)

SSYYNNOOPPSSIISS
     krb5_principal; _v_o_i_d
     kkrrbb55__ffrreeee__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__ppaarrssee__nnaammee(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _c_o_n_s_t _c_h_a_r _*_n_a_m_e,
             _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__uunnppaarrssee__nnaammee(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l,
             _c_h_a_r _*_*_n_a_m_e)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__uunnppaarrssee__nnaammee__ffiixxeedd(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l, _c_h_a_r _*_n_a_m_e, _s_i_z_e___t _l_e_n)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__uunnppaarrssee__nnaammee__sshhoorrtt(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l, _c_h_a_r _*_*_n_a_m_e)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__uunnppaarrssee__nnaammee__ffiixxeedd__sshhoorrtt(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l, _c_h_a_r _*_n_a_m_e, _s_i_z_e___t _l_e_n)

     _k_r_b_5___r_e_a_l_m _*
     kkrrbb55__pprriinncc__rreeaallmm(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l)

     _v_o_i_d
     kkrrbb55__pprriinncc__sseett__rreeaallmm(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l,
             _k_r_b_5___r_e_a_l_m _*_r_e_a_l_m)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__bbuuiilldd__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l,
             _i_n_t _r_l_e_n, _k_r_b_5___c_o_n_s_t___r_e_a_l_m _r_e_a_l_m, _._._.)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__bbuuiilldd__pprriinncciippaall__vvaa(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l,
             _i_n_t _r_l_e_n, _k_r_b_5___c_o_n_s_t___r_e_a_l_m _r_e_a_l_m, _v_a___l_i_s_t _a_p)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__bbuuiilldd__pprriinncciippaall__eexxtt(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l,
             _i_n_t _r_l_e_n, _k_r_b_5___c_o_n_s_t___r_e_a_l_m _r_e_a_l_m, _._._.)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__bbuuiilldd__pprriinncciippaall__vvaa__eexxtt(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l, _i_n_t _r_l_e_n, _k_r_b_5___c_o_n_s_t___r_e_a_l_m _r_e_a_l_m,
             _v_a___l_i_s_t _a_p)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__mmaakkee__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l,
             _k_r_b_5___c_o_n_s_t___r_e_a_l_m _r_e_a_l_m, _._._.)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__ccooppyy__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _i_n_p_r_i_n_c,
             _k_r_b_5___p_r_i_n_c_i_p_a_l _*_o_u_t_p_r_i_n_c)

     _k_r_b_5___b_o_o_l_e_a_n
     kkrrbb55__pprriinncciippaall__ccoommppaarree(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_1,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_2)

     _k_r_b_5___b_o_o_l_e_a_n
     kkrrbb55__pprriinncciippaall__ccoommppaarree__aannyy__rreeaallmm(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_1, _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l, _p_r_i_n_c_2_")

     _c_o_n_s_t _c_h_a_r _*
     kkrrbb55__pprriinncciippaall__ggeett__ccoommpp__ssttrriinngg(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l, _u_n_s_i_g_n_e_d _i_n_t _c_o_m_p_o_n_e_n_t)

     _c_o_n_s_t _c_h_a_r _*
     kkrrbb55__pprriinncciippaall__ggeett__rreeaallmm(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l)

     _i_n_t
     kkrrbb55__pprriinncciippaall__ggeett__ttyyppee(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l)

     _k_r_b_5___b_o_o_l_e_a_n
     kkrrbb55__pprriinncciippaall__mmaattcchh(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l, _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_a_t_t_e_r_n)

     _v_o_i_d
     kkrrbb55__pprriinncciippaall__sseett__ttyyppee(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _p_r_i_n_c_i_p_a_l,
             _i_n_t _t_y_p_e)

     _k_r_b_5___b_o_o_l_e_a_n
     kkrrbb55__rreeaallmm__ccoommppaarree(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_1,
             _k_r_b_5___c_o_n_s_t___p_r_i_n_c_i_p_a_l _p_r_i_n_c_2)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__ssnnaammee__ttoo__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _c_o_n_s_t _c_h_a_r _*_h_o_s_t_n_a_m_e,
             _c_o_n_s_t _c_h_a_r _*_s_n_a_m_e, _i_n_t_3_2___t _t_y_p_e, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_r_e_t___p_r_i_n_c)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__ssoocckk__ttoo__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _i_n_t _s_o_c_k_e_t,
             _c_o_n_s_t _c_h_a_r _*_s_n_a_m_e, _i_n_t_3_2___t _t_y_p_e, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c_i_p_a_l)

     _k_r_b_5___e_r_r_o_r___c_o_d_e
     kkrrbb55__ggeett__ddeeffaauulltt__pprriinncciippaall(_k_r_b_5___c_o_n_t_e_x_t _c_o_n_t_e_x_t, _k_r_b_5___p_r_i_n_c_i_p_a_l _*_p_r_i_n_c)

DDEESSCCRRIIPPTTIIOONN
     krb5_principal holds the name of a user or service in Kerberos.

     A principal has two parts, a PrincipalName and a realm. The PrincipalName
     consists of one or more components. In printed form, the components are
     separated by /.  The PrincipalName also has a name-type.

     Examples of a principal are nisse/root@EXAMPLE.COM and
     host/datan.kth.se@KTH.SE. kkrrbb55__ppaarrssee__nnaammee() passes a principal name in
     _n_a_m_e to the kerberos principal structure.

     kkrrbb55__uunnppaarrssee__nnaammee() prints the principal _p_r_i_n_c to the string _n_a_m_e. _n_a_m_e
     should be freed with free(3).  kkrrbb55__uunnppaarrssee__nnaammee__ffiixxeedd() behaves just
     like kkrrbb55__uunnppaarrssee(), but instead unparses the principal into a fixed size
     buffer.

     kkrrbb55__uunnppaarrssee__nnaammee__sshhoorrtt() just returns the principal without the realm if
     the principal is in the default realm. If the principal isn't, the full
     name is returned.  kkrrbb55__uunnppaarrssee__nnaammee__ffiixxeedd__sshhoorrtt() works just like
     kkrrbb55__uunnppaarrssee__nnaammee__sshhoorrtt() but on a fixed size buffer.

     kkrrbb55__bbuuiilldd__pprriinncciippaall() builds a principal from the realm _r_e_a_l_m that has
     the length _r_l_e_n. The following arguments form the components of the prin-
     cipal.  The list of components is terminated with NULL.

     kkrrbb55__bbuuiilldd__pprriinncciippaall__vvaa() works like kkrrbb55__bbuuiilldd__pprriinncciippaall() using vargs.

     kkrrbb55__bbuuiilldd__pprriinncciippaall__eexxtt() and kkrrbb55__bbuuiilldd__pprriinncciippaall__vvaa__eexxtt() take a list
     of length-value pairs, the list is terminated with a zero length.

     kkrrbb55__mmaakkee__pprriinncciippaall() works the same way as kkrrbb55__bbuuiilldd__pprriinncciippaall(), ex-
     cept it figures out the length of the realm itself.

     kkrrbb55__ccooppyy__pprriinncciippaall() makes a copy of a principal.  The copy needs to be
     freed with kkrrbb55__ffrreeee__pprriinncciippaall().

     kkrrbb55__pprriinncciippaall__ccoommppaarree() compares the two principals, including realm of
     the principals and returns TRUE if they are the same and FALSE if not.

     kkrrbb55__pprriinncciippaall__ccoommppaarree__aannyy__rreeaallmm() works the same way as
     kkrrbb55__pprriinncciippaall__ccoommppaarree() but doesn't compare the realm component of the
     principal.

     kkrrbb55__rreeaallmm__ccoommppaarree() compares the realms of the two principals and re-
     turns TRUE is they are the same, and FALSE if not.

     kkrrbb55__pprriinncciippaall__mmaattcchh() matches a _p_r_i_n_c_i_p_a_l against a _p_a_t_t_e_r_n. The pattern
     is a globbing expression, where each component (separated by /) is
     matched against the corresponding component of the principal.

     The kkrrbb55__pprriinncciippaall__ggeett__rreeaallmm() and kkrrbb55__pprriinncciippaall__ggeett__ccoommpp__ssttrriinngg() func-
     tions return parts of the _p_r_i_n_c_i_p_a_l, either the realm or a specific com-
     ponent.  Both functions return string pointers to data inside the princi-
     pal, so they are valid only as long as the principal exists.

     The _c_o_m_p_o_n_e_n_t argument to kkrrbb55__pprriinncciippaall__ggeett__ccoommpp__ssttrriinngg() is the index
     of the component to return, from zero to the total number of components
     minus one. If the index is out of range NULL is returned.

     kkrrbb55__pprriinncciippaall__ggeett__rreeaallmm() and kkrrbb55__pprriinncciippaall__ggeett__ccoommpp__ssttrriinngg() are re-
     placements for kkrrbb55__pprriinncc__rreeaallmm(), kkrrbb55__pprriinncc__ccoommppoonneenntt() and related
     macros, described as internal in the MIT API specification.  Unlike the
     macros, these functions return strings, not krb5_data. A reason to return
     krb5_data was that it was believed that principal components could con-
     tain binary data, but this belief was unfounded, and it has been decided
     that principal components are infact UTF8, so it's safe to use zero ter-
     minated strings.

     It's generally not necessary to look at the components of a principal.

     kkrrbb55__pprriinncciippaall__ggeett__ttyyppee() and kkrrbb55__pprriinncciippaall__sseett__ttyyppee() get and sets the
     name type for a principal.  Name type handling is tricky and not often
     needed, don't use this unless you know what you do.

     kkrrbb55__pprriinncc__rreeaallmm() returns the realm component of the principal.  The
     caller must not free realm unless kkrrbb55__pprriinncc__sseett__rreeaallmm() is called to set
     a new realm after freeing the realm.  kkrrbb55__pprriinncc__sseett__rreeaallmm() sets the
     realm component of a principal. The old realm is not freed.

     kkrrbb55__ssnnaammee__ttoo__pprriinncciippaall() and kkrrbb55__ssoocckk__ttoo__pprriinncciippaall() are for easy cre-
     ation of ``service'' principals that can, for instance, be used to lookup
     a key in a keytab.  For both functions the _s_n_a_m_e parameter will be used
     for the first component of the created principal.  If _s_n_a_m_e is NULL,
     ``host'' will be used instead.

     kkrrbb55__ssnnaammee__ttoo__pprriinncciippaall() will use the passed _h_o_s_t_n_a_m_e for the second
     component.  If _t_y_p_e is KRB5_NT_SRV_HST this name will be looked up with
     ggeetthhoossttbbyynnaammee().  If _h_o_s_t_n_a_m_e is NULL, the local hostname will be used.

     kkrrbb55__ssoocckk__ttoo__pprriinncciippaall() will use the ``sockname'' of the passed _s_o_c_k_e_t,
     which should be a bound AF_INET or AF_INET6 socket.  There must be a map-
     ping between the address and ``sockname''. The function may try to re-
     solve the name in DNS.

     kkrrbb55__ggeett__ddeeffaauulltt__pprriinncciippaall() tries to find out what's a reasonable de-
     fault principal by looking at the enviroment it is running in.

SSEEEE AALLSSOO
     krb5_425_conv_principal(3),  krb5_config(3),  krb5.conf(5)

BBUUGGSS
     You can not have a NUL in a component in some of the variable argument
     functions above.  Until someone can give a good example of where it would
     be a good idea to have NUL's in a component, this will not be fixed.

 HEIMDAL                         May 29, 2005                                4
